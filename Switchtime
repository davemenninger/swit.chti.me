#!/usr/bin/env perl
use Mojolicious::Lite;

my $status_for_switch = {};

my $clients = {};

my $winning = 0;

# Template with browser-side code
get '/' => sub {
  my $c = shift;
  $c->stash( qty => 9 ); # scalar keys $status_for_switch );
  $c->render('index');
};

# WebSocket echo service
websocket '/echo' => sub {
  my $c = shift;
  app->log->debug( sprintf 'Client connected: %s', $c->tx );
  my $id = sprintf "%s", $c->tx;
  $clients->{$id} = $c->tx;

  # Opened
  $c->app->log->debug('WebSocket opened');

  # Allow inactivity indefinitely
  $c->inactivity_timeout(0);

  # Incoming message
  $c->on(message => sub {
    my ($c, $msg) = @_;
    $c->app->log->debug("incoming: $msg");
    if ( $msg ne 'init' ){
      toggle_switch(msg => $msg);
    }

    update_clients( clients => $clients );
  });

  # Closed
  $c->on(finish => sub {
    my ($c, $code, $reason) = @_;
    $c->app->log->debug("WebSocket closed with status $code");
    delete $clients->{$id};
    update_clients( clients => $clients );
  });
};

sub update_clients {
  my (%args) = @_;
  # global variable could be overridden if you want to just update some clients?
  my $clients = $args{clients};

  $winning = is_winning();
  my $num_clients = scalar keys %$clients;
  for (keys %$clients) {
      $clients->{$_}->send({json => {
          statuses => $status_for_switch,
          num_clients => $num_clients,
          winning => $winning,
      }});
  }

  return;
}

sub toggle_switch {
  my (%args) = @_;
  if ( $status_for_switch->{$args{msg}} eq 'on' ){
    $status_for_switch->{$args{msg}} = 'off';
  }
  else {
    $status_for_switch->{$args{msg}} = 'on';
  }

  return;
}

sub is_winning {
  my (%args) = @_;
  my $is_winning = 0;
  my $num_clients = scalar keys %$clients;

  $is_winning = ( ( scalar map { $_ eq 'on' ? $_ : () } values %$status_for_switch ) % $num_clients ) ? 'nope' : 'yep';

  return $is_winning;
}

app->start;
__DATA__

@@ index.html.ep
<!DOCTYPE html>
<html>
  <head><title>Swit.chti.me</title></head>
  <body>
    <script>
      var ws = new WebSocket('<%= url_for('echo')->to_abs %>');

      // Incoming messages
      ws.onmessage = function (event) {
        var res = JSON.parse(event.data);
        for ( var s in res.statuses ) {
          document.getElementById(s).alt = res.statuses[s];
          if ( res.statuses[s] == 'on' ) {
            document.getElementById(s).src = '/up.png';
          }
          else {
            document.getElementById(s).src = '/down.png';
          }
        }
        document.getElementById('num_clients').innerHTML = res.num_clients;
        document.getElementById('winning').innerHTML = res.winning;
      };

      // Outgoing messages
      ws.onopen = function (event) {
        ws.send('init');
      };

      // Detect connect close
      ws.onclose = function (event) {
        document.getElementById('num_clients').innerHTML = 'lost connection <a href="javascript:window.location.href=window.location.href">reload</a>';
      };

      function toggleme (num) {
        ws.send( num );
      }
    </script>
    <h1>Swit.chti.me</h1>
    <h4>Switches:</h4>
    <%  for my $id ( 1 .. $qty ) { %>
      <a
        href='javascript:;'
        onclick='toggleme("<%= $id %>");'
        ><img
        id='<%= $id %>'
        type='image'
        src='/down.png'
        alt='<%= $id %>'
      /></a>
    <% } %>
    <h4>Number of players currently connected:</h4>
    <p id='num_clients'>0</p>
    <h4>Winning?</h4>
    <p id='winning'>0</p>
  </body>
</html>
